# чтение из csv файла данных и расчет балки
import os, fnmatch, csv
import string_calculation

def read_file(a):
    a = str(a)
    l=[]
    with open(a,'r',newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            l = l + [row]
    return tabl_taxt(l)

def tabl_taxt(tabl):
    text_file = ''
    for i in tabl:
        text_file += i[0] + '\t' + i[1] + i[2] + '\n'
    return text_file

def calculation(name, text_file):
    txt = string_calculation.Calc()
    t = text_file
    # коэффициент учета сжатия 1 / растяжения 0
    k_compression = 1
    if 'N=-'   in t:
        k_compression = 0
        t= t.replace('N=-', 'N=')
    t='''Расчет выполним по СП 64.13330.2011 Деревянные конструкции
'''+t
    txt.c1(t)
    if txt.numer['b_0']!=0:
        t='''Площадь сечения составит (см^2):
A_s=b_0*h_0
Определяем момент сопротивления (см^3):
W_tr=b_0*(h_0^2)/6=5.0*(17.0^2)/6=240.83
Определяем момент инерции относительно оси х (см^4):
I_x=b_0*(h_0^3)/12
Определяем момент инерции относительно оси y (см^4):
I_y=h_0*(b_0^3)/12
Минимальный момент инерции сечения (см):
'''
        txt.c1(t)
        if txt.numer['I_x'] < txt.numer['I_y']:
            t = 'I_min=' +  str(txt.numer['I_x'])
        else:
            t = 'I_min=' +  str(txt.numer['I_y'])
        txt.c1(t)
        t='''
Минимальный радиус инерции сечения (см):
i_min=%(I_min/A_s)
'''
        txt.c1(t)
    else:
        t='''Площадь сечения составит (см^2):
A_s=3.14*h_0**2/4
Определяем момент сопротивления (см^3):
W_tr=3,14*h_0**3/32
Определяем момент инерции (см^4):
I_x=3,14*h_0**4/64
Минимальный радиус инерции сечения (см):
i_min=%(I_x/A_s)
'''
        txt.c1(t)
    t='''
5.2 Расчетные сопротивления, приведенные в таблицах 3, 4 и 6, в соответствующих случаях следует умножать на коэффициенты условий работы: 
а) для различных условий эксплуатации конструкций — коэффициент указанный в таблице 7 (по таблице 1 принимаем класс эксплуатации 3)
m_b=0.9
б) для конструкций, эксплуатируемых при установившейся температуре воздуха до +35 °С коэффициент
m_t=1
в) для конструкций, в которых напряжения в элементах, возникающие от постоянных и временных длительных нагрузок, превышают 80 % суммарного напряжения от всех нагрузок, коэффициент
m_d=1
Расчетные сопротивления, приведенные в таблицах 3,4 и 6, следует разделить на коэффициенты надежности по сроку службы (таблица 12)
\gamma_h=1
Гибкость элемента составит:
\lambda=(L*100)/i_min
'''
    txt.c1(t)
    if k_compression == 1:
        t='''6.3 Коэффициент продольного изгиба \\varphi  следует определять по формуле'''
        txt.c1(t)
        if txt.numer['\lambda'] > 70:
            t='''на устойчивость при гибкости элемента больше 70
\\varphi=3000/\lambda**2
'''
        else:
            t='''на устойчивость при гибкости элемента больше 70
\\varphi=1-0.8*(\lambda/100)**2
'''
        txt.c1(t)
        t='''6.2  Расчет центрально-сжатых элементов постоянного цельного сечения на устойчивость составит (МПа):
\sigma_y=N/(\\varphi*A_s*10)
5.1 Расчетные сопротивления древесины сосны, ели и лиственницы европейской влажностью 12 % для основного сочетания нагрузок (режим В согласно таблице В.1) в сооружениях нормального (2-го согласно приложению Г) уровня ответственности при сроке эксплуатации до 50 лет приведены в таблице 3. Расчетные сопротивления для других пород древесины устанавливают путем умножения величин, приведенных в таблице 3,на переходные коэффициенты, указанные в таблице 5.Расчетные сопротивления LVL из однонаправленного шпона приведены в таблице 4:
а) элементы прямоугольного сечения (за исключением указанных в подпунктах «б», «в») высотой до 50 см
R_i=14
Расчетное сопротивление составит (МПа):
R_u=R_i*m_b*m_t*m_d/\gamma_h=14.0*0.9*1.0*1.0/1.0=12.6
п.6.2  Расчет центрально-сжатых элементов постоянного цельного сечения на прочность (МПа):
\sigma_r=N/(A_s*10)
Коэффициент использования по прочности составит:
k_1=\sigma_r/R_u
Коэффициент использования по устойчивости составит:
k_2=\sigma_y/R_u
6.24 Гибкость элементов и их отдельных ветвей в деревянных конструкциях не 
должна превышать значений, указанных в таблице 17
Для стоек предельная гибкость не должна превышать 120
Коэффициент использования по гибкости:
k_3=\lambda/120'''
    else:
        t='''
5.1 Расчетные сопротивления древесины сосны, ели и лиственницы европейской влажностью 12 % для основного сочетания нагрузок (режим В согласно таблице В.1) в сооружениях нормального (2-го согласно приложению Г) уровня ответственности при сроке эксплуатации до 50 лет приведены в таблице 3. Расчетные сопротивления для других пород древесины устанавливают путем умножения величин, приведенных в таблице 3,на переходные коэффициенты, указанные в таблице 5.Расчетные сопротивления LVL из однонаправленного шпона приведены в таблице 4:
2) Растяжение вдоль волокон
а) элементы из цельной древесины
R_p=7
Расчетное сопротивление составит (МПа):
R_u=R_p*m_b*m_t*m_d/\gamma_h=14.0*0.9*1.0*1.0/1.0=12.6
п.6.2  Расчет центрально-растянутых элементов постоянного цельного сечения на прочность (МПа):
\sigma_r=N/(A_s*10)
Коэффициент использования по прочности составит:
k_1=\sigma_r/R_u
6.24 Гибкость элементов и их отдельных ветвей в деревянных конструкциях не 
должна превышать значений, указанных в таблице 17
Для растянутых элементов предельная гибкость не должна превышать 150
Коэффициент использования по гибкости:
k_2=\lambda/150
'''
    txt.c1(t)
    p = txt.finish(name = name)
    # print(p)
    text_file = txt.rezult
    text_print ='\n'.join( p.split('\n')[-6:])
    print(text_print)
    text_file = txt.rezult
    # замена не удобных данных
    list_a=[
        "(по таблице 1 принимаем класс эксплуатации 3)",
        "температуре воздуха до +35 °С коэффициент",
        "суммарного напряжения от всех нагрузок, коэффициент",
        "следует разделить на коэффициенты надежности по сроку службы (таблица 12)",
        "элементы из цельной древесины",
        "подпунктах «б», «в») высотой до 50 см"]
    for a in list_a:
        text_file = text_file.replace(a+"\n", a+": ")
    list_a = [
        'Расчетная вертикальная сила составит (кгс):',
        'Высота стойки (м):',
        'Высота сечения или диаметр для круга (см): ',
        'Ширина сечения (для круга 0) (см): ',
        'Площадь сечения составит (см^2 ):']
    for a in list_a:
        text_file = text_file.replace(a+"\n", a+" ")
    text_file = text_file.replace("Минимальный момент инерции сечения (см):\n", "Минимальный момент инерции сечения: (см) ")
    text_file = text_file.replace("составит (кгс):\nN=", "составит (кгс): N=")
    text_file = text_file.replace("стойки (м):\nL=", "стойки (м): L=")
    text_file = text_file.replace("сечения (см): \nb_0=", "сечения (см): b_0=")
    text_file = text_file.replace("сечения (см): \nh_0=", "сечения (см): h_0=")
    return text_file

def main():
    # отбор нужных файлов
    f = []# создание списка файлов и чтение из текущей папки списка файлов
    for file in os.listdir('.'):
        if fnmatch.fnmatch(file, '*WCS.csv'):
            f += [file]
    for i in f:
        text_file = read_file(i)
        name = i[:-7]
        text_file = calculation(name, text_file)
        print(text_file)
        string_calculation.write_file(name, str(text_file))
    pass

if __name__ == '__main__':
    main()
    
def WBS(name, tabl):
    text_file = tabl_taxt(tabl)
    text_file = calculation(name, text_file)
    return text_file