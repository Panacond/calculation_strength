# чтение из csv файла данных и расчет балки
import os, fnmatch, csv
import string_calculation

def read_file(a):
    a = str(a)
    l=[]
    with open(a,'r',newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            l = l + [row]
    return tabl_taxt(l)

def tabl_taxt(tabl):
    text_file = ''
    for i in tabl:
        text_file += i[0] + '\t' + i[1] + i[2] + '\n'
    return text_file

def calculation(name, text_file):
    txt = string_calculation.Calc()
    # словарь характеристик бетона
    concrete ={10: 6, 15: 8.5, 20: 11.5, 25: 14.5, 30: 17, 35: 19.5, 40: 22, 45: 25, 50: 27.5, 55: 30, 60: 33}
    concrete_bt ={10: 0.56, 15: 0.75, 20: 0.9, 25: 1.05, 30: 1.15, 35: 1.30, 40: 1.40, 45: 1.50, 50: 1.60, 55: 1.70, 60: 1.80}
    ung = {10: 19000, 15: 24000, 20: 27500, 25: 30000, 30: 32500, 35: 34500, 40: 36000, 45: 37000, 50: 38000, 55: 39000, 60: 39500}
    #name = "Плита"
    # Исходные данные бетон, просто поменять первый все остальные значения заменяться
    t = text_file
    # поиск и замена с помощью регулярных выражений
    import re
    find_concrete = re.search('В\d\d', t).group()
    t = re.sub('В\d\d',find_concrete, t)
    number_concrete = int(find_concrete[1:])
    t += 'R_b='+ str(concrete[number_concrete]) +'\n'
    t += 'E_b='+ str(ung[number_concrete]) +'\n'
    t += 'R_bt='+ str(concrete_bt[number_concrete]) +'\n'
    t='''Расчет бетонного элемента на действие вертикальных нагрузок
Расчет по СП 63.13330.2012 Бетонные и железобетонные конструкции без предварительного напряжения
'''+t
    txt.c1(t,60)
    t = '''Момент от всех нагрузок (кгс  \\times м):
M_0=N_0*e_1/1000
Момент от постоянных и длительных нагрузок (кгс  \\times м):
M_1=N_1*e_1/1000
Момент инерции сечения (см^4):
I_c=(h_c^3*t_c)/(12*10)
Момент сопротивления сечения (см^3):
W_c=(h_c^2*t_c)/6
Площадь сечения (см^2):
F_c=h_c*t_c*10
Радиус инерции сечения(см):
i_c=%(I_c/F_c)
Проверка конструктивных требований для бетонных элементов:
k_1=L_0/i_c*100
'''
    txt.c1(t)
    if txt.numer['k_1'] < 90:
        t = '''Конструктивные требования выполняются
L_0/i_c < 90
'''
    else:
        t = '''Конструктивные требования не выполняются
'''
    txt.c1(t)
    t='''Определим случайный эксцентриситет, он должен быть не менее (мм):
e_a=(L_0*1000)/600
e_b=h_c/30
e_c=10
Примем значение случайного эксцентриситете (мм):'''
    txt.c1(t)
    t = '\ne_0='+ str(max([txt.numer['e_a'],txt.numer['e_b'],txt.numer['e_c']]))+ '\n'
    txt.c1(t)
    t='''Расчетный эксцентриситет определим как сумму случайного и заданного в нагрузках(мм):
e_r=e_0+e_1
Коэффициент учитывающий влияние длительного действия нагрузки на прогиб элемента:
'''
    txt.c1(t)
    if txt.numer['M_0'] ==0:
        t='''\\varphi=1'''
    else:
        t='''\\varphi=1+M_1/M_0'''
    txt.c1(t)
    t='''
При этом \\varphi  должна быть не менее 0,15 и не более 2
Окончательно примем:'''
    txt.c1(t)
    if txt.numer['\\varphi'] < 0.15:
        t = '\n\\varphi=0.15\n'
    elif txt.numer['\\varphi'] > 2:
        t = '\n\\varphi=2\n'
    else:
        t = t = '\n\\varphi=' + str(txt.numer['\\varphi']) + '\n'
    txt.c1(t)
    t='''
d_e=e_r/h_c
При этом d_e должна быть не менее 0,15 и не более 1.5
Окончательно примем:'''
    txt.c1(t)
    if txt.numer['d_e'] < 0.15:
        t = '\nd_e=0.15\n'
    elif txt.numer['d_e'] > 1.5:
        t = '\nd_e=1.5\n'
    else:
        t = t = '\nd_e=' + str(txt.numer['d_e']) + '\n'
    txt.c1(t)
    t ='''k_b=0.15/(\\varphi*(0.3+d_e))
Полученное значение в (м^2 \\times тс):
D=k_b*E_b*I_c/10^6
Критическая сила по формуле 7.7 (кгс):
N_cr=3.14^2*D/L_0^2*10^3
Нагрузка на колонну не может превышать критическую силу.
Вертикальное усилие примем(кгс):
'''
    txt.c1(t)
    t='\nN_k=' + str(min([txt.numer['N_0'],round(txt.numer['N_cr']*0.9)]))+ '\n'
    txt.c1(t)
    t='''По формуле 7.6 СП получим:
\\eta=1/(1-N_k/N_cr)
Площадь учитываемого сечения по формуле 7.2 (см^2):
A_b=F_c*(1-2*e_r*\\eta/h_c)
'''
    txt.c1(t)
    if txt.numer['e_1']< txt.numer['h_c']/30 and txt.numer['L_0']< txt.numer['h_c']*30 and txt.numer['A_b']> 0:
        t='''Расчет ведем сходя из того, что центр тяжести совпадает с точкой приложения продольной силы
Несущая способность сечения по формуле 7.1 составит (кгс):
N_n=R_b*A_b*10'''
        txt.c1(t)
    else:
        t='''Продольная сжимающая сила проходит за пределами поперечного сечения элемента
Тогда несущая способность сечения по формуле 7.5 составит (кгс):
N_n1=(R_b*h_c*t_c*100)/((6*e_r*\\eta)/h_c-1)
Несущая способность по учитываемой части сечения составит (кгс):
N_n2=R_b*A_b*10
Примем наибольшее из полученных значений (кгс):
'''
        txt.c1(t)
        t='N_n='+str(max([txt.numer['N_n1'],txt.numer['N_n2']]))
        txt.c1(t)
        t='''
Момент от действия силы с эксцентриситетом составит (кгс \\times м):
M_3=N_0*e_r/1000'''
        txt.c1(t)
        if txt.numer['N_0'] >0:
            t='''Коэффициент использования от совместного действия силы и изгибающего момента
k_4=(-N_0/F_c+(M_3*100)/W_c)/(R_bt*10)'''
        else:
            t='''Предельный изгибающий момент составит по формуле 7.9 (кгс \\times м):
M_ult=(R_bt*W_c)/10
Коэффициент использования от изгибающего момент без учета действия продольной силы составит:
K_4=M_3/M_ult'''
            txt.c1(t)
    t='''
Коэффициент использования по прочности бетона, на приложенную вертикальную нагрузку:
k_5=N_0/(R_b*F_c*10)
Коэффициент использования по гибкости составит
k_2=k_1/90
Коэффициент использования элемента от действия вертикальной силы составит:
k_3=N_0/N_n
'''    

    txt.c1(t)
    p = txt.finish(name = name)
    text_print = '\n'.join(p.split('\n')[-5:-1])
    print(text_print)
    text_file = txt.rezult
    text_file = text_file.replace('класса\nВ','класса В')
    return text_file

def main():
    # отбор нужных файлов
    f = []# создание списка файлов и чтение из текущей папки списка файлов
    for file in os.listdir('.'):
        if fnmatch.fnmatch(file, '*CCN.csv'):
            f += [file]
    for i in f:
        text_file = read_file(i)
        name = i[:-7]
        text_file = calculation(name, text_file)
    pass

if __name__ == '__main__':
    main()
def CBR(name, tabl):
    text_file = tabl_taxt(tabl)
    text_file = calculation(name, text_file)
    return text_file