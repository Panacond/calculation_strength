# чтение из csv файла данных и расчет висячей буровой сваи
import os, fnmatch, csv
import string_calculation

def read_file(a):
    a = str(a)
    l=[]
    with open(a,'r',newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            l = l + [row]
    return tabl_taxt(l)

def tabl_taxt(tabl):
    text_file = ''
    for i in tabl:
        text_file += i[0] + '\t' + i[1] + i[2] + '\n'
    return text_file

import numpy

def table78():
    'таблица 7,8 I_L h'
    table_x=[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6]
    table_y=[3.0, 5.0, 7.0, 10.0, 12.0, 15.0, 18.0, 20.0, 30.0, 40.0]
    table_Q=[[850.0, 750.0, 650.0, 500.0, 400.0, 300.0, 250.0], 
             [1000.0, 850.0, 750.0, 650.0, 500.0, 400.0, 350.0], 
             [1150.0, 1000.0, 850.0, 750.0, 600.0, 500.0, 450.0], 
             [1350.0, 1200.0, 1050.0, 950.0, 800.0, 700.0, 600.0], 
             [1550.0, 1400.0, 1250.0, 1100.0, 950.0, 800.0, 700.0], 
             [1800.0, 1650.0, 1500.0, 1300.0, 1100.0, 1000.0, 800.0], 
             [2100.0, 1900.0, 1700.0, 1500.0, 1300.0, 1150.0, 950.0], 
             [2300.0, 2100.0, 1900.0, 1650.0, 1450.0, 1250.0, 1050.0],
             [3300.0, 3000.0, 2600.0, 2300.0, 2000.0, 0.0, 0.0], 
             [4500.0, 4000.0, 3500.0, 3000.0, 2500.0, 0.0, 0.0]]
    return table_x, table_y, table_Q

def table73():
    'таблица 7,3 I_L h_gi'
    table_x=[0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    table_y=[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0]
    table_Q=[[35.0, 23.0, 15.0, 12.0, 8.0, 4.0, 4.0, 3.0, 2.0],
            [42.0, 30.0, 21.0, 17.0, 12.0, 7.0, 5.0, 4.0, 4.0], 
            [48.0, 35.0, 25.0, 20.0, 14.0, 8.0, 7.0, 6.0, 5.0], 
            [53.0, 38.0, 27.0, 22.0, 16.0, 9.0, 8.0, 7.0, 5.0], 
            [56.0, 40.0, 29.0, 24.0, 17.0, 10.0, 8.0, 7.0, 6.0], 
            [58.0, 42.0, 31.0, 25.0, 18.0, 10.0, 8.0, 7.0, 6.0], 
            [62.0, 44.0, 33.0, 26.0, 19.0, 10.0, 8.0, 7.0, 6.0], 
            [65.0, 46.0, 34.0, 27.0, 19.0, 10.0, 8.0, 7.0, 6.0], 
            [72.0, 51.0, 38.0, 28.0, 20.0, 11.0, 8.0, 7.0, 6.0], 
            [79.0, 56.0, 41.0, 30.0, 20.0, 12.0, 8.0, 7.0, 6.0], 
            [86.0, 61.0, 44.0, 32.0, 20.0, 12.0, 8.0, 7.0, 6.0], 
            [93.0, 66.0, 47.0, 34.0, 21.0, 12.0, 9.0, 8.0, 7.0], 
            [100.0, 70.0, 50.0, 36.0, 22.0, 13.0, 9.0, 8.0, 7.0]]
    return table_x, table_y, table_Q

def func_interpoly(x, y, table):
    # задание нужных таблиц
    table_x, table_y, table_Q = table
    # cначала создаем список значений у
    table_Y = []
    for i in table_Q:
        interpoly=numpy.interp(x,table_x,i)
        table_Y.append(interpoly)
    f = numpy.interp(y,table_y,table_Y)
    return round(f)

def calculation(name, text_file):
    txt = string_calculation.Calc()
    # расчет
    t = text_file
    t=('''Расчет буровой висячей сваи
Расчет выполняется по СП 24.13330.2011 "Свайные фундаменты"
7.2 Расчетные методы определения несущей способности свай
Висячие набивные, буровые и сваи-оболочки, погружаемые с выемкой
грунта и заполняемые бетоном (сваи трения)
Исходные данные
'''
    +t)
    n = 1
    while 'h=' in t:
        t=t.replace('h=','h_'+str(n) +'=',1)
        '''определение средней глубины слоя'''
        t1 ='=h_0'
        for i in range(1,n+1):
            if i == n:
                t1 += '+h_'+ str(i) +'/2'
            else:
                t1 += '+h_'+ str(i)
        t=t.replace('Плотность грунта (г/см^3):\t\\rho=','Средняя глубина расположения слоя грунта (м):\nh_s'+str(n) + t1 +'\nПлотность грунта (г/см^3):\t\\rho=',1)
        t=t.replace('\\rho=','\\rho_'+str(n) +'=',1)
        t=t.replace('I_L=','I_L'+str(n) +'=',1)
        n +=1
    txt.c1(t,50)
    t = '''Площадь сечения сваи (м^2):
A=3.14*d**2/4
Периметр сваи (м):
u=3.14*d
Глубина погружения сваи (м):
'''
    txt.c1(t)
    t='h_g=h_0'
    for i in range(1,n):
        t += '+h_'+ str(i) 
    txt.c1(t)
    t='''
Расчетное сопротивление грунта под нижним концом сваи 
определяемое интерполяцией по таблице 7.8 (тс/м^2):'''
    txt.c1(t)
    x = txt.numer['I_L'+ str(n-1)]
    y = txt.numer['h_g']
    a  = func_interpoly(x, y, table78())/10
    t= '\tR=' + str(a)
    txt.c1(t)
    t='''
Коэффициент условий работы сваи по таблице 7.6:\t\gamma_cf=0,8
Расчетное сопротивление по боковой поверхности сваи определяется на основании
данных табл. 7.3 и для каждого слоя составит:
'''
    txt.c1(t)
    t = ''
    for i in range(1,n):
        x = txt.numer['I_L'+ str(i)]
        y = txt.numer['h_s'+ str(i)]
        a  = func_interpoly(x, y, table73())/10
        t +='Расчетное сопротивление на боковой поверхности ' + str(i) + ' - го слоя (тс/м^2):\t' 
        t += 'f_' + str(i) + '=' + str(a) + '\n'
    txt.c1(t)
    t='''Суммарное расчетное сопротивление по боковой поверхности сваи составит (тс/м^2):
F_s='''
    for i in range(1,n):
        if i !=1:
            t+='+'
        t +='f_' + str(i) + '*h_' +str(i) + '*\gamma_cf'
    print(t)
    txt.c1(t)
    t='''
7.2.6.  Несущую способность буровой сваи без уширения  по формуле (7.12)
Коэффициент условий работы сваи:\t\gamma_c=1
Коэффициент условий работы грунта под нижним концом сваи:\t\gamma_cR=1
Несущая способность сваи погружаемой с выемкой грунта и заполняемой бетоном, 
работающих на сжимающую нагрузку (тс):
F_d=\gamma_c*(\gamma_cR*R*A+F_s*u)
7.1.11 Сваю в составе фундамента и одиночную сваю по несущей способности грунта
основания следует рассчитывать исходя из условия (7.2)
Коэффициент условий работы, принимаемый 1 при односвайном фундаменте
и 1.15 при кустовом расположении свай\t\gamma_0=1.15
Коэффициент надежности по назначению (ответственности) сооружения
принимаемый равным 1.2, 1.15 и 1.1 для сооружений I, II, III 
уровней ответственности:\t\gamma_n=1.2
Коэффициент надежности по грунту\t\gamma_k=1.4
Несущая способность грунта (тс)
F_dk=(\gamma_0*F_d)/(\gamma_n*\gamma_k)
Коэффициент использования сваи:
k=N/(F_dk*1000)
'''
    txt.c1(t, 60)
    p = txt.finish(name = name)
    text_print = '\n'.join(p.split('\n')[-2:])
    print(text_print)
    text_file = txt.rezult
    # замена текста
    text_file = text_file.replace('\nВдавливающее усилие','Вдавливающее усилие') 
    text_file = text_file.replace('\nМощность слоя','Мощность слоя') 
    t='''Характеристики грунтов\n\n(для песчаных угол внутреннего трения, для глинистых показатель текучести I_L)\n\nРасчет для глинистых грунтов\n'''  
    text_file = text_file.replace(t,'Характеристики грунтов')
    t= 'Высота от верха сваи,  до уровня планировки (м):\nh_0'
    text_file = text_file.replace(t, 'Высота от верха сваи,  до уровня планировки (м):h_0')
    return text_file

def main():
    # отбор нужных файлов
    f = []# создание списка файлов и чтение из текущей папки списка файлов
    for file in os.listdir('.'):
        if fnmatch.fnmatch(file, '*HDP.csv'):
            f += [file]
    for i in f:
        text_file = read_file(i)
        name = i[:-7]
        text_file = calculation(name, text_file)
        string_calculation.write_file(name, str(text_file))
    pass

if __name__ == '__main__':
    main()
def FIN(name, tabl):
    text_file = tabl_taxt(tabl)
    text_file = calculation(name, text_file)
    return text_file