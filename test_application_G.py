import application_G   # The code to test

def test_2():
    # Приложение G проверка таблицы 1 вариант
    b=[2.6,16,6.4,0.84,0.5,2450,0,2060000,740.76,36.85]
    a , b = application_G.function(b)
    assert  b == 0.77
def test_3():
    # Приложение G проверка таблицы 2 вариант
    b=[10,16,6.4,0.84,0.5,2450,1,2060000,740.76,36.85]
    a , b = application_G.function(b)
    assert  b == 0.45
def test_4():
    # Приложение G проверка таблицы 3 вариант
    b=[12,16,6.4,0.84,0.5,2450,2,2060000,740.76,36.85]
    a , b = application_G.function(b)
    assert  b == 0.5

import hangingDrillingPile
# проверка расчета сваи
def test_21():
    x = 0.4
    y = 12 
    table = hangingDrillingPile.table78()
    a  = hangingDrillingPile.func_interpoly(x, y, table)
    assert  a == 950

def test_22():
    x = 0.4
    y = 10 
    table = hangingDrillingPile.table73()
    a  = hangingDrillingPile.func_interpoly(x, y, table)
    assert  a == 34

def test_23():
    x = [['HDP', '', ''], 
        ['Вдавливающее усилие (кгс)', 'N=', '45000'], 
        ['Длина сваи (м):', 'L_sv=', '11,9'], 
        ['Диаметр сваи (м):', 'd=', '0,5'], 
        ['Высота от верха сваи, до уровня планировки (м):', 'h_0=', '1,2'], 
        ['Характеристики грунтов', '', ''], 
        ['(для песчаных угол внутреннего трения, для глинистых показатель текучести I_L)', '', ''], 
        ['Расчет для глинистых грунтов', '', ''], ['ИГЭ-2. Суглинок полутвердый', '', ''], 
        ['Мощность слоя (м):', 'h=', '0,7'], 
        ['Плотность грунта (г/см^3):', '\\rho=', '1,74'], 
        ['Показатель текучести', 'I_L=', '0,2'], ['ИГЭ-3. Суглинок тугопластичный', '', ''], 
        ['Мощность слоя (м):', 'h=', '4,9'], 
        ['Плотность грунта (г/см^3):','\\rho=', '1,92'], 
        ['Показатель текучести', 'I_L=', '0,14'], 
        ['ИГЭ-4. Суглинок мягкопластичный', '', ''], 
        ['Мощность слоя (м):', 'h=', '3,1'], 
        ['Плотность грунта (г/см^3):', '\\rho=', '1,97'], 
        ['Показатель текучести', 'I_L=', '0,64'], 
        ['ИГЭ-3. Суглинок тугопластичный', '', ''], 
        ['Мощность слоя (м):', 'h=', '4,9'], 
        ['Плотность грунта (г/см^3):', '\\rho=', '1,92'], 
        ['Показатель текучести', 'I_L=', '0,14']]
    text_file = hangingDrillingPile.tabl_taxt(x)
    text_file = hangingDrillingPile.calculation('name', text_file)
    list_file = text_file.split('\n')
    a = list_file[-2:-1][0]
    assert  a == 'k_1=N/(F_dk \\times 1000)=45000.0/(79.28 \\times 1000)=0.57'

import BaseFallout
# проверка расчета осадок
def test_31():
    x = '''BFG\t\nНагрузка на фундамент (кгс): \tP_0= 86700\nШирина фундамента (м): \tB_f=2,1\nДлина фундамента (м): \tL_f=2,1\nУгол внутреннего трения: \t\\varphi= 21\nРасчетное значение удельного сцепления грунта, залегающего непосредственно, \t\nпод подошвой фундамента (МПА): \tc_2= 0.036\nОсредненное (см. 5.6.10) расчетное значение удельного веса грунтов, залегающих \t\nниже подошвы фундамента при наличии подземных вод определяется с учетом \t\nвзвешивающего действия воды,  гс/м^3: \tG_2= 2\nТо же, для грунтов выше подошвы фундамента  гс/м^3: \tG_1= 1,84\nГлубина заложения фундамента, расстояние от уровня планировки, \t\nдо подошвы фундамента (м): \td_1= 1,3\nРасстояние от уровня планировки до пола подвала (м): \td_b= 0\nКоэффициент равный 1, если характеристики определены испытаниями, \t\nи 1.1, если приняты по таблицам: \tk_0= 1\nСоотношение сторон (для ленточного фундамента 10):\tn_s=1\nКоэффициент Пуассона для Крупнообломочных 0,27, Пески и супеси 0,3\t\nСуглинки 0,35, Глины 0,41\t\nХарактеристики грунтов\t\n1 слой Насыпной грунт\t\nМощность слоя в (м):\th=1,8\nПлотность грунта в г/см^3:\tg=1,78\nКоэффициент Пуассона:\t\\nu=0,35\nМодуль упругости в (МПа):\tE=5\n2 слой Суглинок элювиальный ИГЭ-2\t\nМощность слоя в (м):\th=3,2\nПлотность грунта в г/см^3:\tg=2\nКоэффициент Пуассона:\t\\nu=0,35\nМодуль упругости в (МПа):\tE=18\n3 слой Суглинок элювиальный ИГЭ-3\t\nМощность слоя в (м):\th=2,6\nПлотность грунта в г/см^3:\tg=2,35\nКоэффициент Пуассона:\t\\nu=0,27\nМодуль упругости в (МПа):\tE=20\n4 слой Полускальный грунт\t\nМощность слоя в (м):\th=2,4\nПлотность грунта в г/см^3:\tg=2,5\nКоэффициент Пуассона:\t\\nu=0,27\nМодуль упругости в (МПа):\tE=20\n'''
    text_file = BaseFallout.calculation('name', x)
    list_file = text_file.split('\n')
    a = list_file[-2:-1][0]
    print(a)
    assert  a == 'k_1=P_r/R_f=19.66/34.24=0.57'


import FoundationStrengthBase
# проверка расчета прочности грунта
def test_41():
    # проверка таблицы 5.12
    corner = 15
    k1, k2, k3 = FoundationStrengthBase.table_512(corner)
    assert k1 == 1.35 and k2 == 3.94 and k3 == 10.98

def test_42():
    # проверка таблицы 5.12
    corner = 42.5
    k1, k2, k3 = FoundationStrengthBase.table_512(corner)
    assert k1 == 121.81 and k2 == 99.53 and k3 == 104.59

def test_43():
    x = [['FSB', '', ''], ['Нагрузка на фундамент (кгс): ', 'P_0= ', '10728'], 
        ['Ширина фундамента (м): ', 'B_f=', '0,7'], ['Длина фундамента (м): ', 'L_f=', '0,7'], 
        ['Эксцентриситет приложения нагрузок в поперечном направлении (м):', 'e_b=', '0'], 
        ['Эксцентриситет приложения нагрузок в поперечном направлении (м):', 'e_l=', '0'], 
        ['Угол внутреннего трения: ', '\\varphi=', '14'], 
        ['Расчетное значение удельного сцепления грунта, залегающего непосредственно, ', '', ''], 
        ['под подошвой фундамента (МПА): ', 'c_I= ', '0,008'], 
        ['Осредненное (см. 5.6.10) расчетное значение удельного веса грунтов, залегающих ', '', ''], 
        ['ниже подошвы фундамента при наличии подземных вод определяется с учетом ', '', ''], 
        ['взвешивающего действия воды,  гс/м^3: ', '\\gamma_I= ', '1,62'], 
        ['То же, для грунтов выше подошвы фундамента  гс/м^3: ', '\\gamma_II= ', '1,74'], 
        ['Глубина заложения фундамента, расстояние от уровня планировки, ', '', ''], 
        ['до подошвы фундамента (м): ', 'd= ', '0,7'], ['грунт в основании фундамента', '', ''], 
        ['выбрать нужный и подставить нужный', 'g1:', 'для песков пылеватых, а также глинистых грунтов в стабилизированном состоянии'], 
        ['для песков, кроме пылеватых', '', ''], ['для песков пылеватых, а также глинистых грунтов в стабилизированном состоянии', '', ''], 
        ['для глинистых грунтов в нестабилизированном состоянии', '', ''], ['для скальных грунтов невыветрелых и слабовыветрелых', '', ''], 
        ['для скальных грунтов выветрелых', '', ''], ['для скальных сильновыветрелых', '', ''],
        ['5.7.2 Коэффициент надежности по назначению сооружения, принимаемый равным', '', ''],
        ['1,2; 1,15 и 1,10 соответственно для сооружений I, II и III уровней ответственности', '\gamma_n= ', '1.2']
        ]
    from support_function import tabl_taxt
    text_file = tabl_taxt(x)
    text_file = FoundationStrengthBase.calculation('name', text_file)
    list_file = text_file.split('\n')
    a = list_file[-2:-1][0]
    assert  a == 'k_1=P_0/N_u=10728.0/11271.4=0.95'

test_43()
# проверка вычисления усилий
import matplotlib_moment_beam_PQ2

def test_51():
    name ='Балка шарнирная сосредоточенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 0)
    B1.addP(1200, 3)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['600.0','600.0','1800.0','0.0', 6,'5400.0']
    assert  a == b

def test_52():
    name ='Балка шарнирная распределенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 0)
    B1.addQ(100, 0, 6)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['300.0','300.0','450.0','0.0', 6,'1687.5']
    assert  a == b

def test_54():
    name ='Балка защемленная с 1 стороны сосредоточенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 1)
    B1.addP(1200, 3)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['375.0','825.0','1125.0','1350.0', 6,'2414.81']
    assert  a == b

def test_55():
    name ='Балка защемленная с 1 стороны распределенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 1)
    B1.addQ(100, 0, 6)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['225.0', '375.0', '252.0', '450.0', 6, '699.84']
    assert  a == b

def test_56():
    name ='Балка защемленная с 2 сторон сосредоточенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 2)
    B1.addP(1200, 3)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['600.0', '600.0', '900.0', '900.0', 6, '1350.0']
    assert  a == b

def test_57():
    name ='Балка защемленная с 2 сторон распределенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 2)
    B1.addQ(100, 0, 6)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['300.0', '300.0', '150.0', '300.0', 6, '337.5']
    assert  a == b
def test_58():
    name ='Балка консольная сосредоточенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 3)
    B1.addP(1200, 3)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['0.0', '1200.0', '0.0', '3600.0', 6, '27000.0']
    assert  a == b

def test_59():
    name ='Балка консольная распределенная'
    L = 6
    B1 = matplotlib_moment_beam_PQ2.Graph(L = L ,S = 3)
    B1.addQ(100, 0, 6)
    # a = matplotlib_moment_beam_PQ2.plot_all(L, B1, name)
    a = matplotlib_moment_beam_PQ2.test_all(L, B1, name)
    b = ['0.0', '600.0', '0.0', '1800.0', 6, '16200.0']
    assert  a == b
test_59()