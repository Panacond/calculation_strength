
# python3
'''функция билинейной интерполяции в table задаются нужные значения 1 строка по х последняя выбор по y'''
table = [['0', '0,1', '0,2', '0,3', '0,4', '0,5', '0,6'], ['850', '750', '650', '500', '400', '300', '250'], ['1000', '850', '750', '650', '500', '400', '350'], ['1150', '1000', '850', '750', '600', '500', '450'], ['1350', '1200', '1050', '950', '800', '700', '600'], ['1550', '1400', '1250', '1100', '950', '800', '700'], ['1800', '1650', '1500', '1300', '1100', '1000', '800'], ['2100', '1900', '1700', '1500', '1300', '1150', '950'], ['2300', '2100', '1900', '1650', '1450', '1250', '1050'], ['3300', '3000', '2600', '2300', '2000', '0', '0'], ['4500', '4000', '3500', '3000', '2500', '0', '0'], ['3', '5', '7', '10', '12', '15', '18', '20', '30', '40']]

table1 =[['0', '5', '10', '15', '20', '25', '30', '35', '40', '45'], ['0', '0,2', '0,6', '1,35', '2,88', '5,87', '12,39', '27,5', '66,01', '177,61'], ['1', '1,57', '2,47', '3,94', '6,4', '10,66', '18,4', '33,3', '64,19', '134,87'], ['5,14', '6,49', '8,34', '10,98', '14,84', '20,72', '30,14', '46,12', '75,31', '133,87']]

def in_number(table):
    '''Перевод списка текстового в список значений'''
    new_table = []
    for i in table:
            if i != '':
                i = i.replace(',', '.')
                new_table.append(float(i))
    return new_table

# выбор нужных частей функции
table_x = in_number(table[0])
print(table_x)
table_y = in_number(table[-1])
print(table_y)
table_Q=[]
for i in table[1:-1]:
    i = in_number(i)
    table_Q.append(i)
print(table_Q)
# функции интерполяции
import numpy
x = 2.75
number = numpy.interp(x,[0.25,0.5,1.0,2.0],[1.19,1.12,1.07,1.04])
y = 2.48
def all_table():
    'функция значений для подстановки'
    table_Q=[[967.0, 922.0, 850.0, 782.0, 722.0, 669.0, 620.0, 577.0, 538.0, 469.0, 417.0, 370.0, 337.0, 307.0, 280.0, 260.0, 237.0, 222.0, 210.0, 183.0, 164.0, 150.0, 125.0, 106.0, 90.0, 77.0], [925.0, 854.0, 778.0, 711.0, 653.0,
600.0, 563.0, 520.0, 484.0, 427.0, 382.0, 341.0, 307.0, 283.0, 259.0, 240.0, 225.0, 209.0, 196.0, 175.0, 157.0, 142.0, 121.0, 103.0, 86.0, 74.0], [875.0, 804.0, 716.0, 647.0, 593.0, 548.0, 507.0, 470.0, 439.0, 388.0, 347.0, 312.0, 283.0, 262.0, 240.0, 223.0, 207.0, 195.0, 182.0, 163.0, 148.0, 134.0, 114.0, 99.0, 82.0, 70.0], [813.0, 742.0, 653.0, 587.0, 536.0, 496.0, 457.0, 425.0, 397.0, 352.0, 315.0, 286.0, 260.0, 240.0, 222.0, 206.0, 193.0, 182.0, 170.0, 153.0, 138.0, 125.0, 107.0, 94.0, 79.0, 67.0], [742.0, 672.0, 587.0, 526.0, 480.0, 442.0, 410.0, 383.0, 357.0, 317.0, 287.0, 262.0, 238.0, 220.0, 204.0, 190.0, 178.0, 168.0, 158.0, 144.0, 130.0, 118.0, 101.0, 90.0, 76.0, 65.0], [667.0, 597.0, 520.0, 465.0, 425.0, 395.0, 365.0, 342.0, 320.0, 287.0, 260.0, 238.0, 217.0, 202.0, 187.0, 175.0, 166.0, 156.0, 147.0, 135.0, 123.0, 112.0, 97.0, 86.0, 73.0, 63.0], [587.0, 522.0, 455.0, 408.0, 375.0, 350.0, 325.0, 303.0, 287.0, 258.0, 233.0, 216.0, 198.0, 183.0, 172.0, 162.0, 153.0, 145.0, 137.0, 125.0, 115.0, 106.0, 92.0, 82.0, 69.0, 60.0], [505.0, 447.0, 394.0, 356.0, 330.0, 309.0, 289.0, 270.0, 256.0, 232.0, 212.0, 197.0, 181.0, 168.0, 158.0, 149.0, 140.0, 135.0, 127.0, 118.0, 108.0, 98.0, 88.0, 78.0, 66.0, 57.0], [418.0, 382.0, 342.0, 310.0, 288.0, 272.0, 257.0, 242.0, 229.0, 208.0, 192.0, 178.0, 165.0, 155.0, 146.0, 137.0, 130.0, 125.0, 118.0, 110.0, 101.0, 93.0, 83.0, 75.0, 64.0, 55.0], [354.0, 326.0, 295.0, 273.0, 253.0, 239.0, 225.0, 215.0, 205.0, 188.0, 175.0, 162.0, 150.0, 143.0, 135.0, 126.0, 120.0, 117.0, 111.0, 103.0, 95.0, 88.0, 79.0, 72.0, 62.0, 53.0], [302.0, 280.0, 256.0, 240.0, 224.0, 212.0, 200.0, 192.0, 184.0, 170.0, 158.0, 148.0, 138.0, 132.0, 124.0, 117.0, 112.0, 108.0, 104.0, 95.0, 89.0, 84.0, 75.0, 69.0, 60.0, 51.0], [258.0, 244.0, 223.0, 210.0, 198.0, 190.0, 178.0, 172.0, 166.0, 153.0, 145.0, 137.0, 128.0, 120.0, 115.0, 109.0, 104.0, 100.0, 96.0, 89.0, 84.0, 79.0, 72.0, 66.0, 57.0, 49.0], [223.0, 213.0, 196.0, 185.0, 176.0, 170.0, 160.0, 155.0, 149.0, 140.0, 132.0, 125.0, 117.0, 112.0, 106.0, 101.0, 97.0, 94.0, 89.0, 83.0, 80.0, 74.0, 68.0, 62.0, 54.0, 47.0], [194.0, 186.0, 173.0, 163.0, 157.0, 152.0, 145.0, 141.0, 136.0, 127.0, 121.0,
115.0, 108.0, 102.0, 98.0, 94.0, 91.0, 87.0, 83.0, 78.0, 74.0, 70.0, 64.0, 59.0, 52.0, 45.0], [152.0, 146.0, 138.0, 133.0, 128.0, 121.0, 117.0, 115.0, 113.0, 106.0, 100.0, 95.0, 91.0, 87.0, 83.0, 81.0, 78.0, 76.0, 74.0, 68.0, 65.0, 62.0, 57.0, 53.0, 47.0, 41.0], [122.0, 117.0, 112.0, 107.0, 103.0, 100.0, 98.0, 96.0, 93.0, 88.0, 85.0, 82.0, 79.0, 75.0, 72.0, 69.0, 66.0, 65.0, 64.0, 61.0, 58.0, 55.0, 51.0, 48.0, 43.0, 38.0], [100.0, 97.0, 93.0, 91.0, 90.0, 85.0, 81.0, 80.0, 79.0, 75.0, 72.0, 70.0, 69.0, 65.0, 62.0, 60.0, 59.0, 58.0, 57.0, 55.0, 52.0, 49.0, 46.0, 43.0, 39.0, 35.0], [83.0, 79.0, 77.0, 76.0, 75.0, 73.0, 71.0, 69.0, 68.0, 63.0, 62.0, 61.0, 60.0, 57.0, 55.0, 53.0, 52.0, 51.0, 50.0, 48.0, 46.0, 44.0, 40.0, 38.0, 35.0, 32.0], [69.0, 67.0, 64.0, 63.0, 62.0, 60.0, 59.0, 59.0, 58.0, 55.0, 54.0, 53.0, 52.0, 51.0, 50.0, 49.0, 48.0, 47.0, 46.0, 44.0, 42.0, 40.0, 37.0, 35.0, 32.0, 29.0], [62.0, 61.0, 54.0, 53.0, 52.0, 51.0, 51.0, 50.0, 49.0, 49.0, 48.0, 48.0, 47.0, 45.0, 44.0, 43.0, 42.0, 41.0, 41.0, 39.0, 38.0, 37.0, 35.0, 33.0, 30.0, 27.0], [52.0, 49.0, 49.0, 48.0, 48.0, 47.0, 47.0, 46.0, 45.0, 44.0, 43.0, 43.0, 42.0, 41.0, 40.0, 40.0, 39.0, 39.0, 38.0, 37.0, 36.0, 36.0, 34.0, 32.0, 29.0, 26.0]]
    table_x=[0.1, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0, 12.0, 14.0, 17.0, 20.0]
    table_y=[0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0]
    return table_x, table_y, table_Q
    
def func_interpoly(x, y):
    # задание нужных таблиц
    table_x, table_y, table_Q = all_table()
    # cначала создаем список значений у
    table_Y = []
    for i in table_Q:
        interpoly=numpy.interp(x,table_x,i)
        table_Y.append(interpoly)
    f = numpy.interp(y,table_y,table_Y)
    return round(f)

def tableG9(x):
    # Таблица Г9 СП 16 металлические конструкции
    # Площади сечений болтов брутто и нетто
    X=[16,18,20,22,24,27,30,36,42,48]
    Y=[2.01,2.54,3.14,3.80,4.52,5.72,7.06,10.17,13.85,18.09]
    A_b = numpy.interp(x,X,Y)
    Y=[1.57,1.92,2.45,3.03,3.53,4.59,5.61,8.16,11.20,14.72]
    A_bn = numpy.interp(x,X,Y)
    return A_b, A_bn

def tableG5(x):
    # Таблица Г5 СП 16 металлические конструкции
    # Расчетные сопротивления срезу и растяжению
    X=[5.6,5.8,8.8,10.9,12.9]
    Y=[210,210,330,415,425]
    R_bs = numpy.interp(x,X,Y)*10
    Y=[225,225,450,560,560]
    R_bt = numpy.interp(x,X,Y)*10
    return R_bs, R_bt

if __name__ == '__main__':
    x=14.1
    y=0.92
    a = func_interpoly(x, y)
    print(a)

# table_x = in_number(table1[0])


