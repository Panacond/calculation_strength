# чтение из csv файла данных и расчет балки
import os, fnmatch, csv
import string_calculation

def read_file(a):
    a = str(a)
    l=[]
    with open(a,'r',newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            l = l + [row]
    return tabl_taxt(l)

def tabl_taxt(tabl):
    text_file = ''
    for i in tabl:
        text_file += i[0] + '\t' + i[1] + i[2] + '\n'
    return text_file

def calculation(name, text_file):
    txt = string_calculation.Calc()
    t = text_file
    t='''Расчет выполним по СП 64.13330.2011 Деревянные конструкции
'''+t
    txt.c1(t)
    if txt.numer['b_0']!=0:
        t='''Площадь сечения составит (см^2):
A_s=b_0*h_0
Определяем момент сопротивления (см^3):
W_tr=b_0*(h_0^2)/6=5.0*(17.0^2)/6=240.83
Определяем момент инерции относительно оси х(см^4 ):
I_x=b_0*(h_0^3)/12
Определяем момент инерции относительно оси y(см^4 ):
I_y=h_0*(b_0^3)/12
Радиус инерции сечения относительно оси х(см):
i_x=%(I_x/A_s)
Радиус инерции сечения относительно оси y(см):
i_y=%(I_y/A_s)
'''
    else:
        t='''Площадь сечения составит бревна (см^2):
A_s=3.14*h_0**2/4
Определяем момент сопротивления (см^3):
W_tr=3,14*h_0**3/32
Определяем момент инерции относительно оси x (см^4):
I_x=3,14*h_0**4/64
Минимальный радиус инерции относительно оси x (см):
i_x=%(I_x/A_s)
Определяем момент инерции относительно оси y (см^4):
I_y=3,14*h_0**4/64
Минимальный радиус инерции относительно оси y (см):
i_y=%(I_x/A_s)
Ширина сечения (см):
b_0=h_0
'''
    txt.c1(t)
    t='''5.2 Расчетные сопротивления, приведенные в таблицах 3, 4 и 6, в соответствующих случаях следует умножать на коэффициенты условий работы: 
а) для различных условий эксплуатации конструкций — коэффициент указанный в таблице 7 (по таблице 1 принимаем класс эксплуатации 3)
m_b=0.9
б) для конструкций, эксплуатируемых при установившейся температуре воздуха до +35 °С коэффициент
m_t=1
в) для конструкций, в которых напряжения в элементах, возникающие от постоянных и временных длительных нагрузок, превышают 80 % суммарного напряжения от всех нагрузок, коэффициент
m_d=1
Расчетные сопротивления, приведенные в таблицах 3,4 и 6, следует разделить на коэффициенты надежности по сроку службы (таблица 12)
\gamma_h=1
5.1 Расчетные сопротивления древесины сосны, ели и лиственницы европейской влажностью 12 % для основного сочетания нагрузок (режим В согласно таблице В.1) в сооружениях нормального (2-го согласно приложению Г) уровня ответственности при сроке эксплуатации до 50 лет приведены в таблице 3. Расчетные сопротивления для других пород древесины устанавливают путем умножения величин, приведенных в таблице 3,на переходные коэффициенты, указанные в таблице 5.Расчетные сопротивления LVL из однонаправленного шпона приведены в таблице 4:
а) элементы прямоугольного сечения (за исключением указанных в подпунктах «б», «в») высотой до 50 см
R_i=14
Расчетное сопротивление составит (МПа):
R_u=R_i*m_b*m_t*m_d/\gamma_h=14.0*0.9*1.0*1.0/1.0=12.6
Гибкость элемента составит относительно оси х:
\lambda_x=(L_r*100)/i_x
Гибкость элемента составит относительно оси y:
\lambda_y=(L_r*100)/i_y
6.3 Коэффициент продольного изгиба \\varphi_x  следует определять по формуле
'''
    txt.c1(t)
    if txt.numer['\lambda_x'] > 70:
        t='''при гибкости элемента больше 70 (8)
\\varphi_x=3000/\lambda_x**2
'''
    else:
        t='''при гибкости элемента больше 70 (7)
\\varphi_x=1-0.8*(\lambda_x/100)**2
'''
    txt.c1(t)
    t='''
6.17 Расчет на прочность внецентренно-сжатых и сжато-изгибаемых элементов
Коэффициент коэффициент, изменяющийся от 1 до 0, учитывающий дополнительный момент от продольной силы вследствие прогиба элемента, определяемый по формуле (32):
\\xi=1-(N)/(\\varphi_x*R_u*10*A_s)
Для шарнирно-опертых элементов при симметричных эпюрах изгибающих моментов синусоидального, параболического, полигонального и близких к ним очертаний, а также для консольных элементов М_d допускается определять по формуле (31):
M_d=M/\\xi
6.17 Расчет на прочность внецентренно-сжатых и сжато-изгибаемых элементов следует по нормальным напряжениям производить по формуле (30):
\sigma_r=N/(A_s*10)+M_d/W_tr*10
Коэффициент использования по прочности составит:
k_1=\sigma_r/R_u
6.20 Расчет на устойчивость плоской формы деформирования сжато-изгибаемых
коэффициент продольного изгиба, определяемый по формуле (8) для гибкости участка элемента
\\varphi=3000/\lambda_y**2
Коэффициент, зависящий от формы эпюры изгибающих моментов на участке, определяемый по таблице Е.2 приложения Е настоящих норм:
k_f=1.13
Коэффициент, определяемый по формуле (25)
\\varphi_m=140*b_0**2/(L_r*h_0*100)*k_f
'''
    txt.c1(t)
    if txt.numer['\\varphi'] < 1 and txt.numer['\\varphi_m'] <1 :
        t='''6.20 Расчет на устойчивость плоской формы деформирования сжато-изгибаемых элементов следует производить по формуле (38):
k_2=N/(\\varphi*R_u*A_s*10)+((M_d*10)/(\\varphi_m*R_u*W_tr))**2
'''
    else:
        t='''Проверка устойчивости плоской формы деформирования не требуется
'''
    txt.c1(t)
    t='''
6.21 Устойчивость сжато-изгибаемого составного элемента из плоскости изгиба следует проверять по формуле (6) без учета изгибающего момента. 
6.3 Коэффициент продольного изгиба \\varphi_y следует определять по формуле:'''
    txt.c1(t)
    if txt.numer['\lambda_y'] > 70:
        t='''при гибкости элемента больше 70 (8):
\\varphi_y=3000/\lambda_y**2
'''
    else:
        t='''при гибкости элемента больше 70 (7):
\\varphi_y=1-0.8*(\lambda_y/100)**2
'''
    txt.c1(t)
    t='''
6.2  Расчет центрально-сжатых элементов постоянного цельного сечения на устойчивость составит (МПа):
\sigma_y=N/(\\varphi_y*A_s*10)
Коэффициент использования по устойчивости из плоскости составит:
k_3=\sigma_y/R_u
6.24 Гибкость элементов и их отдельных ветвей в деревянных конструкциях не должна превышать значений, указанных в таблице 17. Для стоек предельная гибкость не должна превышать 120. Коэффициент использования по гибкости относительно оси х:
k_4=\lambda_x/120
Коэффициент использования по гибкости относительно оси y:
k_5=\lambda_y/120'''
    txt.c1(t)
    p = txt.finish(name = name)
    # print(p)
    text_file = txt.rezult
    text_print ='\n'.join( p.split('\n')[-6:])
    print(text_print)
    text_file = txt.rezult
    # замена не удобных данных
    list_a=[
        "(по таблице 1 принимаем класс эксплуатации 3)",
        "температуре воздуха до +35 °С коэффициент",
        "суммарного напряжения от всех нагрузок, коэффициент",
        "следует разделить на коэффициенты надежности по сроку службы (таблица 12)",
        "элементы из цельной древесины",
        "подпунктах «б», «в») высотой до 50 см"]
    for a in list_a:
        text_file = text_file.replace(a+"\n", a+": ")
    list_a = [
        'изгибающих моментов на участке, определяемый по таблице Е.2 приложения Е настоящих норм:',
        'Расчетный момент составит (кгс  \\times м):',
        'Расчетная сжимающая сила (кгc):',
        'Расчетная длина элемента (м):',
        'Высота сечения или диаметр для круга (см): ',
        'Ширина сечения (для круга 0) (см): ',
        'Площадь сечения составит (см^2 ):']
    for a in list_a:
        text_file = text_file.replace(a+"\n", a+" ")
    text_file = text_file.replace("Минимальный момент инерции сечения (см):\n", "Минимальный момент инерции сечения: (см) ")
    text_file = text_file.replace("составит (кгс):\nN=", "составит (кгс): N=")
    text_file = text_file.replace("стойки (м):\nL=", "стойки (м): L=")
    text_file = text_file.replace("сечения (см): \nb_0=", "сечения (см): b_0=")
    text_file = text_file.replace("сечения (см): \nh_0=", "сечения (см): h_0=")
    text_file = text_file.replace("составит (см^2 ):\nA_s=b_0*h_0", "составит (см^2 ): A_s=b_0*h_0")
    return text_file

def main():
    # отбор нужных файлов
    f = []# создание списка файлов и чтение из текущей папки списка файлов
    for file in os.listdir('.'):
        if fnmatch.fnmatch(file, '*WCM.csv'):
            f += [file]
    for i in f:
        text_file = read_file(i)
        name = i[:-7]
        text_file = calculation(name, text_file)
        print(text_file)
        string_calculation.write_file(name, str(text_file))
    pass

if __name__ == '__main__':
    main()
    
def WBS(name, tabl):
    text_file = tabl_taxt(tabl)
    text_file = calculation(name, text_file)
    return text_file